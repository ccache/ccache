#-----------------------------------------------------------------------------
# See:
#   Syntax validator: https://ci.appveyor.com/tools/validate-yaml
#
#   MSYS2 build environment and example:
#       http://www.msys2.org/
#       https://project-renard.github.io/doc/development/meeting-log/posts/2016/05/03/windows-build-with-msys2/
#
#   MSYS2 packages available in repo, from a suitable MSYS2 shell:
#       pacman -Sl
#   Pre-installed packages in AppVeyor:
#       https://www.appveyor.com/docs/build-environment/#pre-installed-software
#-----------------------------------------------------------------------------

# Simple versioning scheme.
version: 3.3.4-{branch}-{build}

# The MSVC2015 image have many stuff we need.
image: Visual Studio 2015

# Stops on first failing matrix combination
matrix:
  fast_finish: true

platform:
  - x64
  - x86

environment:
  matrix:
    - COMPILER: gcc
    - COMPILER: Visual 2013
    - COMPILER: Visual 2015

# Run AppVeyor only on the windows branch, until we are merged to trunk
branches:
  only:
    - windows

# Note: this is using the cmd (default) shell, so:
#   - use windows style variable definition and path (\ separator, no quotes)
#   - if (...) blocks require & line separator.
#   - nested () in if (...) block require to be escaped with ^
#   - quoted var cannot be quoted again when using it.
#   - split too long blocks in several if ... ( ... )
install:
  # Have MSYS2 in path, including pacman
  - set PATH=C:\MSYS64\usr\bin;%PATH%

  # Install needed packages from MSYS2
  - pacman -S --needed --noconfirm autoconf make perl
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x64" (
      pacman -S --needed --noconfirm mingw-w64-x86_64-gcc
    )
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x86" (
      pacman -S --needed --noconfirm mingw-w64-i686-gcc
    )

  # Print environment details
  - bash config.guess

before_build:
  # ==== Use Visual 2013 with Windows SDK 8.1
  - if "%COMPILER%" EQU "Visual 2013" (
      set VCINSTALLDIR=C:\Program Files ^(x86^)\Microsoft Visual Studio 12.0\VC\&
      set SDK=C:\Program Files ^(x86^)\Windows Kits\8.1\&
      set SDK_VERSION=winv6.3\&
      set CC=cl.exe&
      echo Using Visual 2013 cl.exe
    )

  # ==== Use Visual 2015 with Windows SDK 10
  - if "%COMPILER%" EQU "Visual 2015" (
      set VCINSTALLDIR=C:\Program Files ^(x86^)\Microsoft Visual Studio 14.0\VC\&
      set SDK=C:\Program Files ^(x86^)\Windows Kits\10\&
      set SDK_VERSION=10.0.14393.0\&
      set CC=cl.exe&
      echo Using Visual 2015 cl.exe
    )

  # ==== Common Visual C setup
  - if DEFINED VCINSTALLDIR (
      if NOT EXIST "%VCINSTALLDIR%" (
        dir "C:\Program Files (x86)\Microsoft Visual Studio *" &
        echo "%VCINSTALLDIR% is missing." 1>&2 &
        exit /B 1
      )
    )
  - if DEFINED SDK (
      if NOT EXIST "%SDK%Lib\%SDK_VERSION%um\x64" (
        dir "%SDK%Lib" &
        echo "Microsoft SDK %SDK%Lib\%SDK_VERSION% is missing." 1>&2 &
        exit /B 2
      )
    )

  - if DEFINED VCINSTALLDIR set PATH=%VCINSTALLDIR%BIN;%PATH%
  - if DEFINED VCINSTALLDIR set INCLUDE=%VCINSTALLDIR%include;%VCINSTALLDIR%atlmfc\include;%INCLUDE%
  - if DEFINED VCINSTALLDIR if %PLATFORM% EQU x64 set PATH=%VCINSTALLDIR%BIN\x86_amd64;%PATH%
  - if DEFINED VCINSTALLDIR if %PLATFORM% EQU x64 set LIB=%VCINSTALLDIR%lib\amd64;%VCINSTALLDIR%atlmfc\lib\amd64;%LIB%
  - if DEFINED VCINSTALLDIR if %PLATFORM% EQU x86 set LIB=%VCINSTALLDIR%lib;%VCINSTALLDIR%atlmfc\lib;%LIB%

  - if DEFINED SDK set PATH=%SDK%Bin;%PATH%
  - if DEFINED SDK if %PLATFORM% EQU x64 set PATH=%SDK%Bin\x64;%PATH%

  - set i=%SDK%Include\
  - if DEFINED SDK set INCLUDE=%i%um;%i%shared;%i%;%INCLUDE%
  - if DEFINED SDK set INCLUDE=%i%%SDK_VERSION%um;%i%%SDK_VERSION%ucrt;%i%%SDK_VERSION%shared;%INCLUDE%
  - SET i=

  - set l=%SDK%Lib\%SDK_VERSION%
  - if DEFINED SDK if %PLATFORM% EQU x64 set LIB=%l%um\x64;%l%ucrt\x64;%LIB%
  - if DEFINED SDK if %PLATFORM% EQU x86 set LIB=%l%um\x86;%l%ucrt\x86;%LIB%
  - set l=

  # ==== MinGW gcc compiler
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x64" set PATH=C:\msys64\mingw64\bin;%PATH%
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x64" (
      set CC=gcc&
      echo "Using gcc 64 bits."
    )
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x86" set PATH=C:\msys64\mingw32\bin;%PATH%
  - if "%COMPILER%-%PLATFORM%" EQU "gcc-x86" (
      set CC=gcc&
      echo "Using gcc 32 bits."
    )

  # ==== Misc.
  - set LC_ALL=C
  - set RUN_FROM_BUILD_FARM=1
  - where %CC%

build_script:
  - bash autogen.sh
  - bash configure
  - make PLATFORM=%PLATFORM%

test_script:
  # Run with a few basic options
  - ccache -help
  - ccache -p
  - ccache.exe -Czs
  # Launch unit
  - make PLATFORM=%PLATFORM% test

after_test:
  - 7z a ccache-%APPVEYOR_BUILD_VERSION%.zip ccache.exe AUTHORS.txt LICENSE.txt MANUAL.txt GPL*.txt NEWS.txt

artifacts:
  - path: config.log
    name: logs

  - path: '*.zip'
    name: ccache for windows
    type: Zip
