#!/usr/bin/env python3

# This script converts the number of levels in remote storage.

import os
import sys

import progress.bar
import humanize

levels = 2
digits = 2

storage = "."
filelist = []
for dirpath, dirnames, filenames in os.walk(storage):
    for filename in filenames:
        if filename.endswith(".lock"):
            continue
        stat = os.stat(os.path.join(dirpath, filename))
        filelist.append((dirpath, filename, stat.st_size, stat.st_mtime))
filelist.sort()

files = result = manifest = objects = 0
size = 0
columns = os.get_terminal_size()[0]
width = min(columns - 22, 100)
bar = progress.bar.Bar(
    "Converting...", max=len(filelist), fill="=", suffix="%(percent).1f%%", width=width
)
subdirs = {}
olddirs = {}
for dirpath, filename, filesize, mtime in filelist:
    path = os.path.join(dirpath, filename)
    base = os.path.relpath(path, storage).replace("/", "")
    if filesize < 4:
        continue
    val = open(path, "rb").read(4)
    if val[0:2] == b"\xcc\xac":  # magic
        objects += 1
        if val[2] == 0 and val[3] == 0:
            ext = "R"
            result += 1
        elif val[2] == 0 and val[3] == 1:
            ext = "M"
            manifest += 1
        else:
            bar.next()
            continue
        dirnames = []
        for level in range(0, levels):
            dirnames.append(base[level * digits : level * digits + digits])
        dirname = os.path.join(*dirnames)
        if dirname in subdirs:
            subdirs[dirname] += 1
        else:
            subdirs[dirname] = 1
        filename = base[levels * digits :]
        if not os.path.exists(dirname):
            os.makedirs(dirname, mode=0o755, exist_ok=True)
        os.utime(dirname, times=(mtime, mtime))
        os.rename(path, os.path.join(dirname, filename))
        olddir = os.path.relpath(os.path.dirname(path), storage)
        if not dirname.startswith(olddir):
            olddirs[olddir] = True
    files += 1
    size += filesize
    bar.next()
bar.finish()

print(
    "%d files, %d result (%d manifest) = %d objects (%s)"
    % (files, result, manifest, objects, humanize.naturalsize(size, binary=True))
)
for olddir in olddirs:
    if olddir not in subdirs:
        os.rmdir(olddir)
avg = 0
for subdir in subdirs:
    avg += subdirs[subdir]
avg /= len(subdirs)
print("%d subdirs, %d levels (avg %.2f files)" % (len(subdirs.keys()), levels, avg))
