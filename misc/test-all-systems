#!/bin/sh
#
# While it's obviously quite impossible to support and test every single
# distribution, this script enables easy checking of the most common standard
# distributions at least.

set -eu

top_dir="$(dirname "$(realpath "$0")")/.."
build_in_docker="${top_dir}/misc/build-in-docker"

build() {
    local name=$1
    local cc=$2
    local cxx=$3
    local test_cc=$4
    shift 4
    local cmake_params="$*"
    if command -v >/dev/null ccache; then
        cmake_params="${cmake_params} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
    fi
    echo "Build in Docker: $name CC=$cc CXX=$cxx TEST_CC=$test_cc CMAKE_PARAMS=\"$*\""
    ASM=$cc CC=$cc CXX=$cxx TEST_CC=$test_cc CMAKE_PARAMS="${cmake_params}" $build_in_docker $name
}

#     NAME         CC     CXX     TEST_CC CMAKE_PARAMS

build debian-11    gcc    g++     gcc
build debian-11    clang  clang++ clang

build ubuntu-20.04 gcc    g++     gcc
build ubuntu-20.04 clang  clang++ clang

build ubuntu-22.04 gcc-12 g++-12  gcc
build ubuntu-22.04 clang  clang++ clang

build ubuntu-24.04 gcc-13 g++-13  gcc
build ubuntu-24.04 gcc-14 g++-14  gcc
build ubuntu-24.04 clang  clang++ clang

build centos-7     gcc    g++     gcc
build centos-7     gcc    g++     clang

build fedora-36    gcc    g++     gcc
build fedora-36    clang  clang++ clang

build fedora-40    gcc    g++     gcc     -D DEPS=LOCAL
build fedora-40    clang  clang++ clang   -D DEPS=LOCAL

build alpine-3.11  gcc    g++     gcc
build alpine-3.11  gcc    g++     clang

build alpine-3.15  gcc    g++     gcc
build alpine-3.15  clang  clang++ clang
