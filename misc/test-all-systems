#!/bin/sh

set -eu

# While it's obviously quite impossible to support and test every single
# distribution, this script enables easy checking of the most common standard
# distributions at least.

# Note: Currently this is more a reference on how to run each instance, instead
# of running this entire script at once. See next steps.

# Next steps:
# * Run compilation, tests and/or docker instances in parallel to improve
#   runtime.

build_in_docker=$(dirname $0)/build-in-docker

# -------------------------------------------------------------------------------
# Debian

# See https://github.com/ccache/ccache/issues/602
#CC=gcc   CXX=g++     $build_in_docker debian-9-stretch
#CC=clang CXX=clang++ $build_in_docker debian-9-stretch

CC=gcc   CXX=g++     $build_in_docker debian-10-buster
CC=clang CXX=clang++ $build_in_docker debian-10-buster

# -------------------------------------------------------------------------------
# Ubuntu (ancient, old and latest)

# zstd not available for Ubuntu 14.
CC=gcc   CXX=g++     CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker ubuntu-14-trusty

# See https://github.com/ccache/ccache/issues/601
#CC=clang CXX=clang++ CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker ubuntu-14-tusty

CC=gcc   CXX=g++     $build_in_docker ubuntu-16-xenial
CC=clang CXX=clang++ $build_in_docker ubuntu-16-xenial

CC=gcc   CXX=g++     CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker ubuntu-20-focal
CC=clang CXX=clang++ CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker ubuntu-20-focal

# -------------------------------------------------------------------------------
# Alpine (old and latest)

CC=gcc   CXX=g++     CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker alpine-3.4
# Clang is not capable to compile libzstd from internet before alpine 3.12 (some
# SSE2 error regarding missing file emmintrin.h)
#CC=clang CXX=clang++ CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker alpine-3.4
CC=clang CXX=clang++ CMAKE_PARAMS="-DZSTD_FROM_INTERNET=ON" $build_in_docker alpine-3.12
CC=gcc   CXX=g++     $build_in_docker alpine-3.12
CC=clang CXX=clang++ $build_in_docker alpine-3.12
