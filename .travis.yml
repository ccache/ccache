language: cpp
dist: xenial

script:
  - ./autogen.sh
  - test -z $BUILD_DIR || { mkdir -p $BUILD_DIR; cd $BUILD_DIR; }
  - ${SRC_DIR:-.}/configure $CONFIGURE
  - test "$NO_COMPILE" || make
  - make ${TEST:-test}

matrix:
  include:

  # Job 1: Build (in separate build directory) on Linux with native GCC
  - os: linux
    compiler: gcc
    env: T="Linux GCC, separate build directory" V=1 ENABLE_CACHE_CLEANUP_TESTS=1 BUILD_DIR=build SRC_DIR=..
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 2: Build on Linux with native 32-bit GCC
  - os: linux
    compiler: gcc
    env: T="Linux GCC 32-bit" V=1 CFLAGS="-m32 -g -O2" CXXFLAGS="-m32 -g -O2" LDFLAGS="-m32" CONFIGURE="--host=i386-linux-gnu --with-libzstd-from-internet --with-libb2-from-internet" ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - gcc-multilib
        - lib32stdc++-5-dev

  # Job 3: Build on Linux with native Clang
  - os: linux
    compiler: clang
    env: T="Linux Clang" V=1 ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 4: Build on Linux with native GCC and CUDA compiler
  - os: linux
    compiler: gcc
    env: T="Linux GCC CUDA" V=1 CUDA=10.1.243-1 ENABLE_CACHE_CLEANUP_TESTS=1
    sudo: required
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
    before_install:
    - source ./misc/install_cuda.sh

  # Job 5: Build on Linux with 32-bit MinGW cross-compiler
  - os: linux
    compiler: i686-w64-mingw32-g++-posix
    env: T="Linux MinGW 32-bit" V=1 CC=i686-w64-mingw32-gcc-posix CXX=i686-w64-mingw32-g++-posix CONFIGURE="--host=i686-w64-mingw32 --with-libzstd-from-internet --with-libb2-from-internet" TEST="unittest/run.exe" ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils

  # Job 6: Build on Linux with 64-bit MinGW cross-compiler
  - os: linux
    compiler: x86_64-w64-mingw32-g++
    env: T="Linux MinGW 64-bit" V=1 CC=x86_64-w64-mingw32-gcc-posix CXX=x86_64-w64-mingw32-g++-posix CONFIGURE="--host=x86_64-w64-mingw32 --with-libzstd-from-internet --with-libb2-from-internet" TEST="unittest/run.exe" ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils

  # Job 7: Build on MacOS with native Clang
  - os: osx
    compiler: clang
    env: T="MacOS Clang" V=1 CONFIGURE="--with-libzstd-from-internet --with-libb2-from-internet" ENABLE_CACHE_CLEANUP_TESTS=1

  # Job 8: Run Clang's undefined behavior sanitizer
  - os: linux
    compiler: clang
    env: T="Clang UB sanitizer" V=1 CFLAGS="-fsanitize=undefined" CXXFLAGS="-fsanitize=undefined" LDFLAGS="-fsanitize=undefined" ASAN_OPTIONS="detect_leaks=0"
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 9: Run Clang's address sanitizer
  - os: linux
    compiler: clang
    env: T="Clang address sanitizer" V=1 CFLAGS="-fsanitize=address -g" CXXFLAGS="-fsanitize=address -g" LDFLAGS="-fsanitize=address" ASAN_OPTIONS="detect_leaks=0"
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 10: Run Clang's static analyzer
  - os: linux
    compiler: clang
    env: T="Clang static analyzer" V=1 PATH="/usr/bin:$PATH" SCAN_BUILD=scan-build-7 TEST=analyze
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev

  # Job 11: Run Clang-Tidy
  - os: linux
    env: T="Clang-Tidy" TEST=tidy V=1 PATH="/usr/bin:$PATH" NO_COMPILE=1
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
    before_install:
    - pip install --user compiledb

  # Job 12: Run Clang-Format
  - os: linux
    env: T="Clang-Format" V=1 PATH="/usr/bin:$PATH" NO_COMPILE=1 TEST=check_format
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # New jobs go here until they are established for some weeks
  allow_failures:

  # Job 11: Clang-Tidy
  - os: linux
    env: T="Clang-Tidy" V=1 PATH="/usr/bin:$PATH" NO_COMPILE=1 TEST=tidy
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
    before_install:
    - pip install --user compiledb

  # Job 12: Clang-Format
  - os: linux
    env: T="Clang-Format" V=1 PATH="/usr/bin:$PATH" NO_COMPILE=1 TEST=check_format
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
