language: cpp
dist: bionic

script: ci/build.sh

jobs:
  include:

  # Job 1: Build (in source directory) on Linux with native GCC
  - os: linux
    compiler: gcc
    env: T="Linux GCC" VERBOSE=1 ENABLE_CACHE_CLEANUP_TESTS=1 BUILDDIR=. CCACHE_LOC=.
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 2: Build on Linux with native 32-bit GCC
  - os: linux
    compiler: gcc
    env: T="Linux GCC 32-bit" VERBOSE=1 CFLAGS="-m32 -g -O2" CXXFLAGS="-m32 -g -O2" LDFLAGS="-m32" CMAKE_PARAMS="-DUSE_LIBZSTD_FROM_INTERNET=ON -DUSE_LIBB2_FROM_INTERNET=ON" ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - gcc-multilib
        - g++-multilib
        - lib32stdc++-5-dev

  # Job 3: Build on Linux with native Clang
  - os: linux
    compiler: clang
    env: T="Linux Clang" VERBOSE=1 ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 4: Build on Linux with native GCC and CUDA compiler
  - os: linux
    compiler: gcc
    env: T="Linux GCC CUDA" VERBOSE=1 CUDA=10.1.243-1 ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
    before_install:
    - source ./misc/install_cuda.sh

  # Job 5: Build on Linux with 32-bit MinGW cross-compiler
  - os: linux
    compiler: i686-w64-mingw32-g++-posix
    env: T="Linux MinGW 32-bit" VERBOSE=1 CC=i686-w64-mingw32-gcc-posix CXX=i686-w64-mingw32-g++-posix CMAKE_PARAMS="-DCMAKE_SYSTEM_NAME=Windows -DUSE_LIBZSTD_FROM_INTERNET=ON -DUSE_LIBB2_FROM_INTERNET=ON" RUN_TESTS=0 ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils

  # Job 6: Build on Linux with 64-bit MinGW cross-compiler
  - os: linux
    compiler: x86_64-w64-mingw32-g++
    env: T="Linux MinGW 64-bit" VERBOSE=1 CC=x86_64-w64-mingw32-gcc-posix CXX=x86_64-w64-mingw32-g++-posix CMAKE_PARAMS="-DCMAKE_SYSTEM_NAME=Windows -DUSE_LIBZSTD_FROM_INTERNET=ON -DUSE_LIBB2_FROM_INTERNET=ON" RUN_TESTS=0 ENABLE_CACHE_CLEANUP_TESTS=1
    addons:
      apt:
        packages:
        - elfutils

  # Job 7: Build on MacOS with native Clang
  - os: osx
    compiler: clang
    env: T="MacOS Clang" VERBOSE=1 CMAKE_PARAMS="-DUSE_LIBZSTD_FROM_INTERNET=ON -DUSE_LIBB2_FROM_INTERNET=ON" ENABLE_CACHE_CLEANUP_TESTS=1

  # Job 8: Run Clang's undefined behavior sanitizer
  - os: linux
    compiler: clang
    env: T="Clang UB sanitizer" VERBOSE=1 CMAKE_PARAMS="-DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON" ASAN_OPTIONS="detect_leaks=0"
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 9: Run Clang's address sanitizer
  - os: linux
    compiler: clang
    env: T="Clang address sanitizer" VERBOSE=1 CMAKE_PARAMS="-DENABLE_SANITIZER_ADDRESS=ON" ASAN_OPTIONS="detect_leaks=0"
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 10: Run Clang's static analyzer
  - os: linux
    compiler: clang
    env: T="Clang static analyzer" VERBOSE=1 PATH="/usr/bin:$PATH" CMAKE_PREFIX=scan-build RUN_TESTS=0
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev

  # Job 11: Run Clang-Tidy
  - os: linux
    compiler: clang
    env: T="Clang-Tidy" VERBOSE=1 CMAKE_PARAMS="-DENABLE_CLANG_TIDY=ON" RUN_TESTS=0
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev

  # Job 12: Run Clang-Format amd CMake-Format check mode
  - os: linux
    compiler: clang
    env: T="Clang-Format" VERBOSE=1 BUILDEXTRAFLAGS="--target check_format" RUN_TESTS=0
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev
    before_install:
    - pip install --user cmake_format

  # Job 13: Build binary package, extract it out of source, run tests.
  - os: linux
    env: T="Build binary and verify" VERBOSE=1 SPECIAL=build_and_verify_package
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 14: Build source package, extract it out of source, run tests.
  - os: linux
    env: T="Build source package and verify" VERBOSE=1 SPECIAL=build_and_verify_package_source
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev

  # Job 15: Build documentation
  - os: linux
    env: T="Build documentation" VERBOSE=1 BUILDEXTRAFLAGS="--target documentation" RUN_TESTS=0
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
        - asciidoc

  # Job 16: Build manpage
  - os: linux
    env: T="Build manpage" VERBOSE=1 BUILDEXTRAFLAGS="--target manpage" RUN_TESTS=0
    addons:
      apt:
        packages:
        - elfutils
        - libzstd1-dev
        - libb2-dev
        - asciidoc
        - xsltproc

  # New jobs go here until they are established for some weeks
  allow_failures:

  # Job 11: Run Clang-Tidy
  - os: linux
    compiler: clang
    env: T="Clang-Tidy" VERBOSE=1 CMAKE_PARAMS="-DENABLE_CLANG_TIDY=ON" RUN_TESTS=0
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev

  # Job 12: Run Clang-Format amd CMake-Format check mode
  - os: linux
    compiler: clang
    env: T="Clang-Format" VERBOSE=1 BUILDEXTRAFLAGS="--target check_format" RUN_TESTS=0
    addons:
      apt:
        packages:
        - libzstd1-dev
        - libb2-dev
    before_install:
    - pip install --user cmake_format
